---
import type { CollectionEntry } from "astro:content";

import BaseLayout from "./Base.astro";
import BlogHero from "@/components/blog/Hero";
import MonetizationButtons from "@/components/MonetizationButtons";
import LanguageSelector from "@/components/LanguageSelector";

interface Props {
	post: CollectionEntry<"post">;
	translatedPost: CollectionEntry<"post"> | undefined;
}

interface Heading {
	depth: number;
	slug: string;
	text: string;
}

const { post, translatedPost } = Astro.props;
const {
	data: { title, description, ogImage, publishDate, language },
	slug,
} = post;
const socialImage = ogImage ?? `/og-image/${slug}.png`;
const articleDate = publishDate.toISOString();
const { headings } = await post.render();

console.log(headings.length)

// Get the current language from localStorage or default to post's language
const currentLanguage = language;
---

<script define:vars={{ currentLanguage, slug, translatedPost, language }}>
	// Initialize language from localStorage or default to post's language
	const savedLanguage = localStorage.getItem('preferredLanguage') || currentLanguage;
	document.documentElement.lang = savedLanguage;
	
	// Update language when changed
	window.addEventListener('languageChange', (event => {
		const newLanguage = event.detail.language;
		console.log('Language change event received:', { newLanguage, currentLanguage, translatedPost });
		document.documentElement.lang = newLanguage;
		
		// If we have a translated post and the language is different from current post,
		// redirect to the translated post
		if (translatedPost && newLanguage !== language) {
			console.log('Redirecting to translated post:', translatedPost.slug);
			window.location.href = `/posts/${translatedPost.slug}`;
		} else if (!translatedPost && newLanguage === language) {
			console.log('Redirecting to current post:', slug);
			window.location.href = `/posts/${slug}`;
		} else {
			// If no translation is available, just update the language
			console.log('No translation available, updating language only');
			document.documentElement.lang = newLanguage;
		}
	}));

	// Initialize scroll to top button
	document.addEventListener('DOMContentLoaded', () => {
		const scrollBtn = document.getElementById("to-top-btn");
		const targetHeader = document.getElementById("blog-hero");

		if (scrollBtn && targetHeader) {
			function callback(entries) {
				entries.forEach((entry) => {
					// only show the scroll to top button when the heading is out of view
					scrollBtn.dataset.show = (!entry.isIntersecting).toString();
				});
			}

			scrollBtn.addEventListener("click", () => {
				document.documentElement.scrollTo({ top: 0, behavior: "smooth" });
			});

			const observer = new IntersectionObserver(callback);
			observer.observe(targetHeader);
		}
	});
</script>

<BaseLayout meta={{ title, description, articleDate, ogImage: socialImage }}>
	<div class="gap-x-10 lg:flex lg:items-start">
		{
			!!headings.length && (
				<aside class="sticky top-20 order-2 -me-32 hidden basis-64 lg:block">
					<h2 class="font-semibold">Table of Contents</h2>
					<ul class="mt-4 text-xs">
						{headings.map(({ depth, slug, text }: Heading) => (
							<li class="hover:text-accent line-clamp-2">
								<a
									class={`block ${depth <= 2 ? "mt-3" : "mt-2 ps-3 text-[0.6875rem]"}`}
									href={`#${slug}`}
									aria-label={`Scroll to section: ${text}`}
								>
									<span>{"#".repeat(depth)}</span> {text}
								</a>
							</li>
						))}
					</ul>
					<div class="mt-4">
						<MonetizationButtons />
					</div>
				</aside>
			)
		}
		<article class="flex-grow break-words">
			<div id="blog-hero">
				<div class="flex justify-end mb-4">
					<LanguageSelector currentLanguage={currentLanguage} />
				</div>
				<BlogHero content={post} />
			</div>
			<div
				class="prose prose-sm prose-cactus mt-12 prose-headings:font-semibold prose-headings:before:absolute prose-headings:before:-ms-4 prose-headings:before:text-accent prose-headings:before:content-['#'] prose-th:before:content-none"
			>
				<slot />
			</div>
		</article>
	</div>
	<button
		id="to-top-btn"
		class="z-90 fixed bottom-8 end-4 flex h-10 w-10 translate-y-28 items-center justify-center rounded-full border-2 border-transparent bg-zinc-200 text-3xl opacity-0 transition-all duration-300 hover:border-zinc-400 data-[show=true]:translate-y-0 data-[show=true]:opacity-100 dark:bg-zinc-700 sm:end-8 sm:h-12 sm:w-12"
		aria-label="Back to Top"
		data-show="false"
		><svg
			xmlns="http://www.w3.org/2000/svg"
			aria-hidden="true"
			focusable="false"
			fill="none"
			viewBox="0 0 24 24"
			stroke-width="2"
			stroke="currentColor"
			class="h-6 w-6"
		>
			<path stroke-linecap="round" stroke-linejoin="round" d="M4.5 15.75l7.5-7.5 7.5 7.5"></path>
		</svg>
	</button>
	<div class="mt-4 lg:hidden">
		<MonetizationButtons />
	</div>
</BaseLayout>
